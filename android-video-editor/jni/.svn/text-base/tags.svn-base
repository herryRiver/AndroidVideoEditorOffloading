!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACCESS_DENIED	iperf.h	/^    ACCESS_DENIED = -1,$/;"	e	enum:__anon4
ALL_STREAMS_END	iperf.h	/^    ALL_STREAMS_END = 8,$/;"	e	enum:__anon4
CIRCLEQ_EMPTY	queue.h	436;"	d
CIRCLEQ_END	queue.h	433;"	d
CIRCLEQ_ENTRY	queue.h	422;"	d
CIRCLEQ_FIRST	queue.h	431;"	d
CIRCLEQ_FOREACH	queue.h	439;"	d
CIRCLEQ_FOREACH_REVERSE	queue.h	444;"	d
CIRCLEQ_HEAD	queue.h	413;"	d
CIRCLEQ_HEAD_INITIALIZER	queue.h	419;"	d
CIRCLEQ_INIT	queue.h	452;"	d
CIRCLEQ_INSERT_AFTER	queue.h	457;"	d
CIRCLEQ_INSERT_BEFORE	queue.h	467;"	d
CIRCLEQ_INSERT_HEAD	queue.h	477;"	d
CIRCLEQ_INSERT_TAIL	queue.h	487;"	d
CIRCLEQ_LAST	queue.h	432;"	d
CIRCLEQ_NEXT	queue.h	434;"	d
CIRCLEQ_PREV	queue.h	435;"	d
CIRCLEQ_REMOVE	queue.h	497;"	d
CIRCLEQ_REPLACE	queue.h	512;"	d
CLIENT_TERMINATE	iperf.h	/^    CLIENT_TERMINATE = 12,$/;"	e	enum:__anon4
COOKIE_SIZE	iperf.h	56;"	d
CREATE_STREAMS	iperf.h	/^    CREATE_STREAMS = 10,$/;"	e	enum:__anon4
DEFAULT_TCP_BLKSIZE	iperf.h	/^    DEFAULT_TCP_BLKSIZE = 128 * 1024,  \/* default read\/write block size *\/$/;"	e	enum:__anon4
DEFAULT_UDP_BLKSIZE	iperf.h	/^    DEFAULT_UDP_BLKSIZE = 1450, \/* 1 packet per ethernet frame, IPV6 too *\/$/;"	e	enum:__anon4
DISPLAY_RESULTS	iperf.h	/^    DISPLAY_RESULTS = 14,$/;"	e	enum:__anon4
DURATION	iperf.h	/^    DURATION = 5, \/* seconds *\/$/;"	e	enum:__anon4
EXCHANGE_RESULTS	iperf.h	/^    EXCHANGE_RESULTS = 13,$/;"	e	enum:__anon4
GIGA_CONV	units.c	/^	GIGA_CONV$/;"	e	enum:__anon1	file:
GIGA_UNIT	units.c	/^    const long GIGA_UNIT = 1024 * 1024 * 1024;$/;"	v
GIGA_UNIT_SI	units.c	/^    const long GIGA_UNIT_SI = 1000 * 1000 * 1000;$/;"	v
HTONLL	net.h	26;"	d
HTONLL	net.h	29;"	d
IEACCEPT	iperf_error.h	/^    IEACCEPT = 14,          \/\/ Unable to accept connection from client (check herror\/perror)$/;"	e	enum:__anon2
IEACCESSDENIED	iperf_error.h	/^    IEACCESSDENIED = 31,    \/\/ The server is busy running a test. Try again later.$/;"	e	enum:__anon2
IEBLOCKSIZE	iperf_error.h	/^    IEBLOCKSIZE = 6,        \/\/ Block size too large. Maximum value = %dMAX_BLOCKSIZE$/;"	e	enum:__anon2
IEBUFSIZE	iperf_error.h	/^    IEBUFSIZE = 7,          \/\/ Socket buffer size too large. Maximum value = %dMAX_TCP_BUFFER$/;"	e	enum:__anon2
IECLIENTONLY	iperf_error.h	/^    IECLIENTONLY = 3,       \/\/ This option is client only$/;"	e	enum:__anon2
IECLIENTTERM	iperf_error.h	/^    IECLIENTTERM = 29,      \/\/ The client has terminated$/;"	e	enum:__anon2
IECONNECT	iperf_error.h	/^    IECONNECT = 13,         \/\/ Unable to connect to server (check herror\/perror) [from netdial]$/;"	e	enum:__anon2
IECREATESTREAM	iperf_error.h	/^    IECREATESTREAM = 41,    \/\/ Unable to create a new stream (check herror\/perror)$/;"	e	enum:__anon2
IECTRLCLOSE	iperf_error.h	/^    IECTRLCLOSE = 19,       \/\/ Control socket has closed unexpectedly$/;"	e	enum:__anon2
IECTRLREAD	iperf_error.h	/^    IECTRLREAD = 18,        \/\/ Unable to read from the control socket (check perror)$/;"	e	enum:__anon2
IECTRLWRITE	iperf_error.h	/^    IECTRLWRITE = 17,       \/\/ Unable to write to the control socket (check perror)$/;"	e	enum:__anon2
IEDURATION	iperf_error.h	/^    IEDURATION = 4,         \/\/ test duration too long. Maximum value = %dMAX_TIME$/;"	e	enum:__anon2
IEINITSTREAM	iperf_error.h	/^    IEINITSTREAM = 42,      \/\/ Unable to initialize stream (check herror\/perror)$/;"	e	enum:__anon2
IEINITTEST	iperf_error.h	/^    IEINITTEST = 11,        \/\/ Test initialization failed (check perror)$/;"	e	enum:__anon2
IEINTERVAL	iperf_error.h	/^    IEINTERVAL = 8,         \/\/ Report interval too large. Maxumum value = %dMAX_INTERVAL$/;"	e	enum:__anon2
IELISTEN	iperf_error.h	/^    IELISTEN = 12,          \/\/ Unable to listen for connections (check perror)$/;"	e	enum:__anon2
IEMESSAGE	iperf_error.h	/^    IEMESSAGE = 20,         \/\/ Received an unknown message$/;"	e	enum:__anon2
IEMSS	iperf_error.h	/^    IEMSS = 9,              \/\/ MSS too large. Maximum value = %dMAX_MSS$/;"	e	enum:__anon2
IENEWTEST	iperf_error.h	/^    IENEWTEST = 10,         \/\/ Unable to create a new test (check perror)$/;"	e	enum:__anon2
IENEWTIMER	iperf_error.h	/^    IENEWTIMER = 50,        \/\/ Unable to create new timer (check perror)$/;"	e	enum:__anon2
IENONBLOCKING	iperf_error.h	/^    IENONBLOCKING = 38,     \/\/ Unable to set socket to non-blocking (check perror)$/;"	e	enum:__anon2
IENONE	iperf_error.h	/^    IENONE = 0,             \/\/ No error$/;"	e	enum:__anon2
IENOROLE	iperf_error.h	/^    IENOROLE = 2,           \/\/ Iperf must either be a client (-c) or server (-s)$/;"	e	enum:__anon2
IENUMSTREAMS	iperf_error.h	/^    IENUMSTREAMS = 5,       \/\/ Number of parallel streams too large. Maximum value = %dMAX_STREAMS$/;"	e	enum:__anon2
IEPACKAGERESULTS	iperf_error.h	/^    IEPACKAGERESULTS = 25,  \/\/ Unable to package results (check perror)$/;"	e	enum:__anon2
IEPROTOCOL	iperf_error.h	/^    IEPROTOCOL = 40,        \/\/ Protocol does not exist$/;"	e	enum:__anon2
IERECVCOOKIE	iperf_error.h	/^    IERECVCOOKIE = 16,      \/\/ Unable to receive cookie from client (check perror)$/;"	e	enum:__anon2
IERECVMESSAGE	iperf_error.h	/^    IERECVMESSAGE = 22,     \/\/ Unable to receive control message from client\/server (check perror)$/;"	e	enum:__anon2
IERECVPARAMS	iperf_error.h	/^    IERECVPARAMS = 24,      \/\/ Unable to receive parameters from client (check perror)$/;"	e	enum:__anon2
IERECVRESULTS	iperf_error.h	/^    IERECVRESULTS = 27,     \/\/ Unable to receive results from client\/server (check perror)$/;"	e	enum:__anon2
IEREUSEADDR	iperf_error.h	/^    IEREUSEADDR = 37,       \/\/ Unable to set reuse address on socket (check perror)$/;"	e	enum:__anon2
IESELECT	iperf_error.h	/^    IESELECT = 28,          \/\/ Select failed (check perror)$/;"	e	enum:__anon2
IESENDCOOKIE	iperf_error.h	/^    IESENDCOOKIE = 15,      \/\/ Unable to send cookie to server (check perror)$/;"	e	enum:__anon2
IESENDMESSAGE	iperf_error.h	/^    IESENDMESSAGE = 21,     \/\/ Unable to send control message to client\/server (check perror)$/;"	e	enum:__anon2
IESENDPARAMS	iperf_error.h	/^    IESENDPARAMS = 23,      \/\/ Unable to send parameters to server (check perror)$/;"	e	enum:__anon2
IESENDRESULTS	iperf_error.h	/^    IESENDRESULTS = 26,     \/\/ Unable to send results to client\/server (check perror)$/;"	e	enum:__anon2
IESERVCLIENT	iperf_error.h	/^    IESERVCLIENT = 1,       \/\/ Iperf cannot be both server and client$/;"	e	enum:__anon2
IESERVERTERM	iperf_error.h	/^    IESERVERTERM = 30,      \/\/ The server has terminated$/;"	e	enum:__anon2
IESETBUF	iperf_error.h	/^    IESETBUF = 34,          \/\/ Unable to set socket buffer size (check perror)$/;"	e	enum:__anon2
IESETCOS	iperf_error.h	/^    IESETCOS = 36,          \/\/ Unable to set IPv6 traffic class (check perror)$/;"	e	enum:__anon2
IESETMSS	iperf_error.h	/^    IESETMSS = 33,          \/\/ Unable to set TCP MSS (check perror)$/;"	e	enum:__anon2
IESETNODELAY	iperf_error.h	/^    IESETNODELAY = 32,      \/\/ Unable to set TCP NODELAY (check perror)$/;"	e	enum:__anon2
IESETTOS	iperf_error.h	/^    IESETTOS = 35,          \/\/ Unable to set IP TOS (check perror)$/;"	e	enum:__anon2
IESETWINDOWSIZE	iperf_error.h	/^    IESETWINDOWSIZE = 39,   \/\/ Unable to set socket window size (check perror)$/;"	e	enum:__anon2
IESTREAMACCEPT	iperf_error.h	/^    IESTREAMACCEPT = 45,    \/\/ Unable to accepte stream connection (check perror)$/;"	e	enum:__anon2
IESTREAMCLOSE	iperf_error.h	/^    IESTREAMCLOSE = 48,     \/\/ Stream has closed unexpectedly$/;"	e	enum:__anon2
IESTREAMCONNECT	iperf_error.h	/^    IESTREAMCONNECT = 44,   \/\/ Unable to connect stream (check herror\/perror)$/;"	e	enum:__anon2
IESTREAMID	iperf_error.h	/^    IESTREAMID = 49,        \/\/ Stream has invalid ID$/;"	e	enum:__anon2
IESTREAMLISTEN	iperf_error.h	/^    IESTREAMLISTEN = 43,    \/\/ Unable to start stream listener (check perror) $/;"	e	enum:__anon2
IESTREAMREAD	iperf_error.h	/^    IESTREAMREAD = 47,      \/\/ Unable to read from stream (check perror)$/;"	e	enum:__anon2
IESTREAMWRITE	iperf_error.h	/^    IESTREAMWRITE = 46,     \/\/ Unable to write to stream socket (check perror)$/;"	e	enum:__anon2
IEUPDATETIMER	iperf_error.h	/^    IEUPDATETIMER = 51,     \/\/ Unable to update timer (check perror)$/;"	e	enum:__anon2
IPERF_DONE	iperf.h	/^    IPERF_DONE = 16,$/;"	e	enum:__anon4
IPERF_LOCALE_H	locale.h	11;"	d
IPERF_START	iperf.h	/^    IPERF_START = 15,$/;"	e	enum:__anon4
IPERF_TCP_H	iperf_tcp.h	11;"	d
IPERF_VERSION	version.h	10;"	d
IPERF_VERSION_DATE	version.h	11;"	d
JNI_OnLoad	main.c	/^jint JNI_OnLoad(JavaVM* vm, void* reserved)$/;"	f
Java_com_example_launchbed_MainActivity_getDownloadedBytes	main.c	/^Java_com_example_launchbed_MainActivity_getDownloadedBytes(JNIEnv *jenv, jobject  obj)$/;"	f
Java_com_example_launchbed_MainActivity_getHostCpuUtilization	main.c	/^Java_com_example_launchbed_MainActivity_getHostCpuUtilization(JNIEnv *jenv, jobject  obj)$/;"	f
Java_com_example_launchbed_MainActivity_getTimeTaken	main.c	/^Java_com_example_launchbed_MainActivity_getTimeTaken(JNIEnv *jenv, jobject  obj)$/;"	f
Java_com_example_launchbed_MainActivity_getUploadedBytes	main.c	/^Java_com_example_launchbed_MainActivity_getUploadedBytes(JNIEnv *jenv, jobject  obj)$/;"	f
Java_com_example_launchbed_MainActivity_launchBandwidthTest	main.c	/^Java_com_example_launchbed_MainActivity_launchBandwidthTest(JNIEnv *jenv, jobject  obj)$/;"	f
Java_com_example_launchbed_MainActivity_launchLatencyTest	main.c	/^Java_com_example_launchbed_MainActivity_launchLatencyTest(JNIEnv * env, jobject  obj)$/;"	f
KILO_CONV	units.c	/^	KILO_CONV,$/;"	e	enum:__anon1	file:
KILO_UNIT	units.c	/^    const long KILO_UNIT = 1024;$/;"	v
KILO_UNIT_SI	units.c	/^    const long KILO_UNIT_SI = 1000;$/;"	v
LIST_EMPTY	queue.h	186;"	d
LIST_END	queue.h	185;"	d
LIST_ENTRY	queue.h	175;"	d
LIST_FIRST	queue.h	184;"	d
LIST_FOREACH	queue.h	189;"	d
LIST_HEAD	queue.h	167;"	d
LIST_HEAD_INITIALIZER	queue.h	172;"	d
LIST_INIT	queue.h	197;"	d
LIST_INSERT_AFTER	queue.h	201;"	d
LIST_INSERT_BEFORE	queue.h	209;"	d
LIST_INSERT_HEAD	queue.h	216;"	d
LIST_NEXT	queue.h	187;"	d
LIST_REMOVE	queue.h	223;"	d
LIST_REPLACE	queue.h	232;"	d
LOCAL_LDLIBS	Android.mk	/^LOCAL_LDLIBS	:= -llog$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE    := launchbed$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := main.c iperf_api.c iperf_client_api.c iperf_error.c iperf_tcp.c timer.c locale.c net.c units.c tcp_info.c iperf_udp.c iperf_util.c ping.c$/;"	m
LOGE	iperf.h	23;"	d
LOGI	iperf.h	22;"	d
MAX_BLOCKSIZE	iperf.h	227;"	d
MAX_INTERVAL	iperf.h	228;"	d
MAX_MSS	iperf.h	230;"	d
MAX_RESULT_STRING	iperf.h	221;"	d
MAX_STREAMS	iperf.h	231;"	d
MAX_TCP_BUFFER	iperf.h	226;"	d
MAX_TIME	iperf.h	229;"	d
MB	iperf.h	225;"	d
MEGA_CONV	units.c	/^	MEGA_CONV,$/;"	e	enum:__anon1	file:
MEGA_UNIT	units.c	/^    const long MEGA_UNIT = 1024 * 1024;$/;"	v
MEGA_UNIT_SI	units.c	/^    const long MEGA_UNIT_SI = 1000 * 1000;$/;"	v
NTOHLL	net.h	27;"	d
NTOHLL	net.h	38;"	d
Nread	net.c	/^Nread(int fd, void *buf, int count, int prot)$/;"	f
Nwrite	net.c	/^Nwrite(int fd, void *buf, int count, int prot)$/;"	f
PARAM_EXCHANGE	iperf.h	/^    PARAM_EXCHANGE = 9,$/;"	e	enum:__anon4
PORT	iperf.h	/^    PORT = 5201,  \/* default port to listen on (don't use the same port as iperf2) *\/$/;"	e	enum:__anon4
Ptcp	iperf.h	/^    Ptcp = SOCK_STREAM,$/;"	e	enum:__anon4
Pudp	iperf.h	/^    Pudp = SOCK_DGRAM,$/;"	e	enum:__anon4
RATE	iperf.h	/^    RATE = 1024 * 1024, \/* 1 Mbps *\/$/;"	e	enum:__anon4
RESULT_REQUEST	iperf.h	/^    RESULT_REQUEST = 3,$/;"	e	enum:__anon4
SEC_TO_NS	iperf.h	220;"	d
SEC_TO_US	iperf.h	/^    SEC_TO_US = 1000000,$/;"	e	enum:__anon4
SERVER_ERROR	iperf.h	/^    SERVER_ERROR = -2,$/;"	e	enum:__anon4
SERVER_TERMINATE	iperf.h	/^    SERVER_TERMINATE = 11,$/;"	e	enum:__anon4
SIMPLEQ_EMPTY	queue.h	264;"	d
SIMPLEQ_END	queue.h	263;"	d
SIMPLEQ_ENTRY	queue.h	254;"	d
SIMPLEQ_FIRST	queue.h	262;"	d
SIMPLEQ_FOREACH	queue.h	267;"	d
SIMPLEQ_HEAD	queue.h	245;"	d
SIMPLEQ_HEAD_INITIALIZER	queue.h	251;"	d
SIMPLEQ_INIT	queue.h	275;"	d
SIMPLEQ_INSERT_AFTER	queue.h	292;"	d
SIMPLEQ_INSERT_HEAD	queue.h	280;"	d
SIMPLEQ_INSERT_TAIL	queue.h	286;"	d
SIMPLEQ_NEXT	queue.h	265;"	d
SIMPLEQ_REMOVE_HEAD	queue.h	298;"	d
SLIST_EMPTY	queue.h	112;"	d
SLIST_END	queue.h	111;"	d
SLIST_ENTRY	queue.h	102;"	d
SLIST_FIRST	queue.h	110;"	d
SLIST_FOREACH	queue.h	115;"	d
SLIST_FOREACH_PREVPTR	queue.h	120;"	d
SLIST_HEAD	queue.h	94;"	d
SLIST_HEAD_INITIALIZER	queue.h	99;"	d
SLIST_INIT	queue.h	128;"	d
SLIST_INSERT_AFTER	queue.h	132;"	d
SLIST_INSERT_HEAD	queue.h	137;"	d
SLIST_NEXT	queue.h	113;"	d
SLIST_REMOVE	queue.h	150;"	d
SLIST_REMOVE_HEAD	queue.h	146;"	d
SLIST_REMOVE_NEXT	queue.h	142;"	d
STREAM_BEGIN	iperf.h	/^    STREAM_BEGIN = 5,$/;"	e	enum:__anon4
STREAM_END	iperf.h	/^    STREAM_END = 7,$/;"	e	enum:__anon4
STREAM_RUNNING	iperf.h	/^    STREAM_RUNNING = 6,$/;"	e	enum:__anon4
TAILQ_EMPTY	queue.h	332;"	d
TAILQ_END	queue.h	325;"	d
TAILQ_ENTRY	queue.h	315;"	d
TAILQ_FIRST	queue.h	324;"	d
TAILQ_FOREACH	queue.h	335;"	d
TAILQ_FOREACH_REVERSE	queue.h	340;"	d
TAILQ_HEAD	queue.h	306;"	d
TAILQ_HEAD_INITIALIZER	queue.h	312;"	d
TAILQ_INIT	queue.h	348;"	d
TAILQ_INSERT_AFTER	queue.h	370;"	d
TAILQ_INSERT_BEFORE	queue.h	380;"	d
TAILQ_INSERT_HEAD	queue.h	353;"	d
TAILQ_INSERT_TAIL	queue.h	363;"	d
TAILQ_LAST	queue.h	327;"	d
TAILQ_NEXT	queue.h	326;"	d
TAILQ_PREV	queue.h	330;"	d
TAILQ_REMOVE	queue.h	387;"	d
TAILQ_REPLACE	queue.h	398;"	d
TEST_END	iperf.h	/^    TEST_END = 4,$/;"	e	enum:__anon4
TEST_RUNNING	iperf.h	/^    TEST_RUNNING = 2,$/;"	e	enum:__anon4
TEST_START	iperf.h	/^    TEST_START = 1,$/;"	e	enum:__anon4
UNIT_CONV	units.c	/^	UNIT_CONV,$/;"	e	enum:__anon1	file:
UNIT_LEN	units.h	/^    UNIT_LEN = 11$/;"	e	enum:__anon3
_Q_INVALIDATE	queue.h	86;"	d
_Q_INVALIDATE	queue.h	88;"	d
_SYS_QUEUE_H_	queue.h	36;"	d
__IPERF_API_H	iperf_api.h	11;"	d
__IPERF_CLIENT_API_H	iperf_client_api.h	11;"	d
__IPERF_ERROR_H	iperf_error.h	16;"	d
__IPERF_H	iperf.h	11;"	d
__IPERF_UDP_H	iperf_udp.h	11;"	d
__IPERF_UTIL_H	iperf_util.h	11;"	d
__NET_H	net.h	11;"	d
__TIMER_H	timer.h	11;"	d
accept	iperf.h	/^    int       (*accept)(struct iperf_test *);$/;"	m	struct:protocol
add_to_interval_list	iperf_api.c	/^add_to_interval_list(struct iperf_stream_result * rp, struct iperf_interval_results * new)$/;"	f
all_data_sent	iperf_api.c	/^all_data_sent(struct iperf_test * test)$/;"	f
begin	timer.h	/^    struct timeval begin;$/;"	m	struct:timer	typeref:struct:timer::timeval
bind_address	iperf.h	/^    char     *bind_address;                     \/* -B option *\/$/;"	m	struct:iperf_test
bind_address	locale.c	/^const char bind_address[] =$/;"	v
blksize	iperf.h	/^    int       blksize;              \/* size of read\/writes (-l) *\/$/;"	m	struct:iperf_settings
buffer	iperf.h	/^    char      *buffer;		\/* data to send *\/$/;"	m	struct:iperf_stream
build_tcpinfo_message	tcp_info.c	/^build_tcpinfo_message(struct iperf_interval_results *r, char *message)$/;"	f
bytes	iperf.h	/^    iperf_size_t bytes;             \/* number of bytes to send *\/$/;"	m	struct:iperf_settings
bytes_received	iperf.h	/^    iperf_size_t bytes_received;$/;"	m	struct:iperf_stream_result
bytes_received_this_interval	iperf.h	/^    iperf_size_t bytes_received_this_interval;$/;"	m	struct:iperf_stream_result
bytes_sent	iperf.h	/^    iperf_size_t bytes_sent;$/;"	m	struct:iperf_stream_result
bytes_sent	iperf.h	/^    iperf_size_t bytes_sent;$/;"	m	struct:iperf_test
bytes_sent_this_interval	iperf.h	/^    iperf_size_t bytes_sent_this_interval;$/;"	m	struct:iperf_stream_result
bytes_transferred	iperf.h	/^    iperf_size_t bytes_transferred; \/* bytes transfered in this interval *\/$/;"	m	struct:iperf_interval_results
cksum	ping.c	/^unsigned short cksum(unsigned short *addr, int len)$/;"	f
client_datagram_size	locale.c	/^const char client_datagram_size[] =$/;"	v
client_port	locale.c	/^const char client_port[] =$/;"	v
cnt_error	iperf.h	/^    int       cnt_error;$/;"	m	struct:iperf_stream
connect	iperf.h	/^    int       (*connect)(struct iperf_test *);$/;"	m	struct:protocol
connect_msg	iperf_api.c	/^connect_msg(struct iperf_stream *sp)$/;"	f
conversion_bits	units.c	/^    const double conversion_bits[] =$/;"	v
conversion_bytes	units.c	/^    const double conversion_bytes[] =$/;"	v
cookie	iperf.h	/^    char      cookie[COOKIE_SIZE];$/;"	m	struct:iperf_test
cpu_util	iperf.h	/^    double cpu_util;                            \/* cpu utilization of the test *\/$/;"	m	struct:iperf_test
cpu_util	timer.c	/^cpu_util(double *pcpu)$/;"	f
ctrl_sck	iperf.h	/^    int       ctrl_sck;$/;"	m	struct:iperf_test
custom_data	iperf.h	/^    void     *custom_data;$/;"	m	struct:iperf_interval_results
daemon	iperf.h	/^    int       daemon;                           \/* -D option *\/$/;"	m	struct:iperf_test
data	iperf.h	/^    void     *data;$/;"	m	struct:iperf_stream
data	iperf.h	/^    void     *data;$/;"	m	struct:iperf_stream_result
debug	iperf.h	/^    int	      debug;                            \/* -d option - debug mode *\/$/;"	m	struct:iperf_test
delay	timer.c	/^delay(int us)$/;"	f
delay	timer.c	/^delay(int64_t ns)$/;"	f
domain	iperf.h	/^    int       domain;               \/* AF_INET or AF_INET6 *\/$/;"	m	struct:iperf_settings
duration	iperf.h	/^    int       duration;                         \/* total duration of test (-t flag) *\/$/;"	m	struct:iperf_test
end	timer.h	/^    struct timeval end;$/;"	m	struct:timer	typeref:struct:timer::timeval
end_time	iperf.h	/^    struct timeval end_time;$/;"	m	struct:iperf_stream_result	typeref:struct:iperf_stream_result::timeval
env	iperf_api.c	/^jmp_buf env;            \/* to handle longjmp on signal *\/$/;"	v
expired	timer.h	/^    int (*expired)(struct timer *timer);$/;"	m	struct:timer
free_timer	timer.c	/^free_timer(struct timer * tp)$/;"	f
gTest	main.c	/^struct iperf_test *gTest = NULL;$/;"	v	typeref:struct:iperf_test
get_protocol	iperf_api.c	/^get_protocol(struct iperf_test *test, int prot_id)$/;"	f
get_tcp_windowsize	tcp_window_size.c	/^get_tcp_windowsize(int sock, int dir)$/;"	f
get_tcpinfo	tcp_info.c	/^get_tcpinfo(struct iperf_stream *sp, struct iperf_interval_results *rp)$/;"	f
getsock_tcp_mss	net.c	/^getsock_tcp_mss(int inSock)$/;"	f
htonll	net.h	48;"	d
i_errno	iperf_error.c	/^int i_errno;$/;"	v
id	iperf.h	/^    int       id;$/;"	m	struct:iperf_stream
id	iperf.h	/^    int       id;$/;"	m	struct:protocol
init	iperf.h	/^    int       (*init)(struct iperf_test *);$/;"	m	struct:protocol
interval_duration	iperf.h	/^    float     interval_duration;$/;"	m	struct:iperf_interval_results
interval_end_time	iperf.h	/^    struct timeval interval_end_time;$/;"	m	struct:iperf_interval_results	typeref:struct:iperf_interval_results::timeval
interval_results	iperf.h	/^    struct iperf_interval_results *interval_results;      \/\/ head of list$/;"	m	struct:iperf_stream_result	typeref:struct:iperf_stream_result::iperf_interval_results
interval_start_time	iperf.h	/^    struct timeval interval_start_time;$/;"	m	struct:iperf_interval_results	typeref:struct:iperf_interval_results::timeval
iperf_add_stream	iperf_api.c	/^iperf_add_stream(struct iperf_test * test, struct iperf_stream * sp)$/;"	f
iperf_client_end	iperf_client_api.c	/^iperf_client_end(struct iperf_test *test)$/;"	f
iperf_connect	iperf_client_api.c	/^iperf_connect(struct iperf_test *test)$/;"	f
iperf_create_streams	iperf_client_api.c	/^iperf_create_streams(struct iperf_test *test)$/;"	f
iperf_defaults	iperf_api.c	/^iperf_defaults(struct iperf_test * testp)$/;"	f
iperf_error	iperf_error.c	/^iperf_error(char *estr)$/;"	f
iperf_exchange_parameters	iperf_api.c	/^iperf_exchange_parameters(struct iperf_test * test)$/;"	f
iperf_exchange_results	iperf_api.c	/^iperf_exchange_results(struct iperf_test *test)$/;"	f
iperf_free_stream	iperf_api.c	/^iperf_free_stream(struct iperf_stream * sp)$/;"	f
iperf_free_test	iperf_api.c	/^iperf_free_test(struct iperf_test * test)$/;"	f
iperf_get_results	iperf_api.c	/^iperf_get_results(struct iperf_test *test)$/;"	f
iperf_handle_message_client	iperf_client_api.c	/^iperf_handle_message_client(struct iperf_test *test)$/;"	f
iperf_init_stream	iperf_api.c	/^iperf_init_stream(struct iperf_stream *sp, struct iperf_test *test)$/;"	f
iperf_init_test	iperf_api.c	/^iperf_init_test(struct iperf_test *test)$/;"	f
iperf_interval_results	iperf.h	/^struct iperf_interval_results$/;"	s
iperf_new_stream	iperf_api.c	/^iperf_new_stream(struct iperf_test *test, int s)$/;"	f
iperf_new_test	iperf_api.c	/^iperf_new_test()$/;"	f
iperf_on_connect	iperf_api.c	/^iperf_on_connect(struct iperf_test *test)$/;"	f
iperf_on_new_stream	iperf_api.c	/^iperf_on_new_stream(struct iperf_stream *sp)$/;"	f
iperf_on_test_finish	iperf_api.c	/^iperf_on_test_finish(struct iperf_test *test)$/;"	f
iperf_on_test_start	iperf_api.c	/^iperf_on_test_start(struct iperf_test *test)$/;"	f
iperf_parse_arguments	iperf_api.c	/^iperf_parse_arguments(struct iperf_test *test, int argc, char **argv)$/;"	f
iperf_print_intermediate	iperf_api.c	/^iperf_print_intermediate(struct iperf_test *test)$/;"	f	file:
iperf_print_results	iperf_api.c	/^iperf_print_results (struct iperf_test *test)$/;"	f	file:
iperf_recv	iperf_api.c	/^iperf_recv(struct iperf_test *test)$/;"	f
iperf_reporter_callback	iperf_api.c	/^iperf_reporter_callback(struct iperf_test * test)$/;"	f
iperf_reset_test	iperf_api.c	/^iperf_reset_test(struct iperf_test *test)$/;"	f
iperf_run	main.c	/^iperf_run(struct iperf_test * test)$/;"	f
iperf_run_client	iperf_client_api.c	/^iperf_run_client(struct iperf_test * test)$/;"	f
iperf_send	iperf_api.c	/^iperf_send(struct iperf_test *test)$/;"	f
iperf_settings	iperf.h	/^struct iperf_settings$/;"	s
iperf_size_t	iperf.h	/^typedef uint64_t iperf_size_t;$/;"	t
iperf_stats_callback	iperf_api.c	/^iperf_stats_callback(struct iperf_test * test)$/;"	f
iperf_stream	iperf.h	/^struct iperf_stream$/;"	s
iperf_stream_result	iperf.h	/^struct iperf_stream_result$/;"	s
iperf_strerror	iperf_error.c	/^iperf_strerror(int i_errno)$/;"	f
iperf_tcp_accept	iperf_tcp.c	/^iperf_tcp_accept(struct iperf_test * test)$/;"	f
iperf_tcp_connect	iperf_tcp.c	/^iperf_tcp_connect(struct iperf_test *test)$/;"	f
iperf_tcp_listen	iperf_tcp.c	/^iperf_tcp_listen(struct iperf_test *test)$/;"	f
iperf_tcp_recv	iperf_tcp.c	/^iperf_tcp_recv(struct iperf_stream *sp)$/;"	f
iperf_tcp_send	iperf_tcp.c	/^iperf_tcp_send(struct iperf_stream *sp)$/;"	f
iperf_test	iperf.h	/^struct iperf_test$/;"	s
iperf_udp_accept	iperf_udp.c	/^iperf_udp_accept(struct iperf_test *test)$/;"	f
iperf_udp_connect	iperf_udp.c	/^iperf_udp_connect(struct iperf_test *test)$/;"	f
iperf_udp_init	iperf_udp.c	/^iperf_udp_init(struct iperf_test *test)$/;"	f
iperf_udp_listen	iperf_udp.c	/^iperf_udp_listen(struct iperf_test *test)$/;"	f
iperf_udp_recv	iperf_udp.c	/^iperf_udp_recv(struct iperf_stream *sp)$/;"	f
iperf_udp_send	iperf_udp.c	/^iperf_udp_send(struct iperf_stream *sp)$/;"	f
is_closed	iperf_util.c	/^is_closed(int fd)$/;"	f
jitter	iperf.h	/^    double    jitter;$/;"	m	struct:iperf_stream
join_multicast	locale.c	/^const char join_multicast[] =$/;"	v
label_bit	units.c	/^    const char *label_bit[] =$/;"	v
label_byte	units.c	/^    const char *label_byte[] =$/;"	v
last_interval_results	iperf.h	/^    struct iperf_interval_results *last_interval_results; \/\/ end of list$/;"	m	struct:iperf_stream_result	typeref:struct:iperf_stream_result::iperf_interval_results
listen	iperf.h	/^    int       (*listen)(struct iperf_test *);$/;"	m	struct:protocol
listener	iperf.h	/^    int       listener;$/;"	m	struct:iperf_test
local_addr	iperf.h	/^    struct sockaddr_storage local_addr;$/;"	m	struct:iperf_stream	typeref:struct:iperf_stream::sockaddr_storage
local_port	iperf.h	/^    int       local_port;$/;"	m	struct:iperf_stream
main_launch	main.c	/^main_launch(int argc, char **argv)$/;"	f
make_cookie	iperf_util.c	/^make_cookie(char *cookie)$/;"	f
max_fd	iperf.h	/^    int       max_fd;$/;"	m	struct:iperf_test
mss	iperf.h	/^    int       mss;                  \/* for TCP MSS *\/$/;"	m	struct:iperf_settings
multicast_ttl	locale.c	/^const char multicast_ttl[] =$/;"	v
name	iperf.h	/^    char      *name;$/;"	m	struct:protocol
netannounce	net.c	/^netannounce(int domain, int proto, char *local, int port)$/;"	f
netdial	net.c	/^netdial(int domain, int proto, char *local, char *server, int port)$/;"	f
new_timer	timer.c	/^new_timer(time_t sec, suseconds_t usec)$/;"	f
next	iperf.h	/^    struct iperf_interval_results *next;$/;"	m	struct:iperf_interval_results	typeref:struct:iperf_interval_results::iperf_interval_results
no_delay	iperf.h	/^    int       no_delay;                         \/* -N option *\/$/;"	m	struct:iperf_test
ntohll	net.h	49;"	d
num_streams	iperf.h	/^    int       num_streams;                      \/* total streams in the test (-P) *\/$/;"	m	struct:iperf_test
on_connect	iperf.h	/^    void      (*on_connect)(struct iperf_test *);$/;"	m	struct:iperf_test
on_new_stream	iperf.h	/^    void      (*on_new_stream)(struct iperf_stream *);$/;"	m	struct:iperf_test
on_test_finish	iperf.h	/^    void      (*on_test_finish)(struct iperf_test *);$/;"	m	struct:iperf_test
on_test_start	iperf.h	/^    void      (*on_test_start)(struct iperf_test *);$/;"	m	struct:iperf_test
opt_estimate	locale.c	/^const char opt_estimate[]=$/;"	v
outoforder_packets	iperf.h	/^    int       outoforder_packets;$/;"	m	struct:iperf_stream
output_format	iperf.h	/^    int       output_format;                    \/* -O option *\/$/;"	m	struct:iperf_test
package_parameters	iperf_api.c	/^package_parameters(struct iperf_test *test)$/;"	f
packet_count	iperf.h	/^    int       packet_count;$/;"	m	struct:iperf_stream
parse_parameters	iperf_api.c	/^parse_parameters(struct iperf_test *test)$/;"	f
parse_results	iperf_api.c	/^parse_results(struct iperf_test *test, char *results)$/;"	f
prev_transit	iperf.h	/^    double    prev_transit;$/;"	m	struct:iperf_stream
print_interval_results	iperf_api.c	/^print_interval_results(struct iperf_test * test, struct iperf_stream * sp)$/;"	f
print_tcpinfo	tcp_info.c	/^print_tcpinfo(struct iperf_test *test)$/;"	f
prot_listener	iperf.h	/^    int       prot_listener;$/;"	m	struct:iperf_test
protocol	iperf.h	/^    struct protocol *protocol;$/;"	m	struct:iperf_test	typeref:struct:iperf_test::protocol
protocol	iperf.h	/^struct protocol {$/;"	s
protocols	iperf.h	/^    SLIST_ENTRY(protocol) protocols;$/;"	m	struct:protocol
protocols	iperf.h	/^    SLIST_HEAD(plisthead, protocol) protocols;$/;"	m	struct:iperf_test
rate	iperf.h	/^    uint64_t  rate;                 \/* target data rate, UDP only *\/$/;"	m	struct:iperf_settings
rcv	iperf.h	/^    int       (*rcv) (struct iperf_stream * stream);$/;"	m	struct:iperf_stream
read_set	iperf.h	/^    fd_set    read_set;                         \/* set of read sockets *\/$/;"	m	struct:iperf_test
recv	iperf.h	/^    int       (*recv)(struct iperf_stream *);$/;"	m	struct:protocol
remote_addr	iperf.h	/^    struct sockaddr_storage remote_addr;$/;"	m	struct:iperf_stream	typeref:struct:iperf_stream::sockaddr_storage
remote_cpu_util	iperf.h	/^    double remote_cpu_util;                     \/* cpu utilization for the remote host\/client *\/$/;"	m	struct:iperf_test
remote_port	iperf.h	/^    int       remote_port;$/;"	m	struct:iperf_stream
reportCSV_bw_format	locale.c	/^const char reportCSV_bw_format[] =$/;"	v
reportCSV_bw_jitter_loss_format	locale.c	/^const char reportCSV_bw_jitter_loss_format[] =$/;"	v
reportCSV_peer	locale.c	/^const char reportCSV_peer[] =$/;"	v
report_bw_format	locale.c	/^const char report_bw_format[] =$/;"	v
report_bw_header	locale.c	/^const char report_bw_header[] =$/;"	v
report_bw_jitter_loss_format	locale.c	/^const char report_bw_jitter_loss_format[] =$/;"	v
report_bw_jitter_loss_header	locale.c	/^const char report_bw_jitter_loss_header[] =$/;"	v
report_datagrams	locale.c	/^const char report_datagrams[] =$/;"	v
report_interval_small	locale.c	/^const char report_interval_small[] =$/;"	v
report_mss	locale.c	/^const char report_mss[] =$/;"	v
report_mss_unsupported	locale.c	/^const char report_mss_unsupported[] =$/;"	v
report_outoforder	locale.c	/^const char report_outoforder[] =$/;"	v
report_peer	locale.c	/^const char report_peer[] =$/;"	v
report_read_length_times	locale.c	/^const char report_read_length_times[] =$/;"	v
report_read_lengths	locale.c	/^const char report_read_lengths[] =$/;"	v
report_sum_bw_format	locale.c	/^const char report_sum_bw_format[] =$/;"	v
report_sum_bw_jitter_loss_format	locale.c	/^const char report_sum_bw_jitter_loss_format[] =$/;"	v
report_sum_datagrams	locale.c	/^const char report_sum_datagrams[] =$/;"	v
report_sum_outoforder	locale.c	/^const char report_sum_outoforder[] =$/;"	v
report_tcpInfo	locale.c	/^const char report_tcpInfo[] =$/;"	v
reporter_callback	iperf.h	/^    void      (*reporter_callback) (struct iperf_test *);$/;"	m	struct:iperf_test
reporter_interval	iperf.h	/^    double    reporter_interval;$/;"	m	struct:iperf_test
reporter_timer	iperf.h	/^    struct timer *reporter_timer;$/;"	m	struct:iperf_test	typeref:struct:iperf_test::timer
result	iperf.h	/^    struct iperf_stream_result *result;	\/* structure pointer to result *\/$/;"	m	struct:iperf_stream	typeref:struct:iperf_stream::iperf_stream_result
reverse	iperf.h	/^    int       reverse;                          \/* -R option *\/$/;"	m	struct:iperf_test
role	iperf.h	/^    char      role;                             \/* c' lient or 's' erver *\/$/;"	m	struct:iperf_test
send	iperf.h	/^    int       (*send)(struct iperf_stream *);$/;"	m	struct:protocol
send_timer	iperf.h	/^    struct timer *send_timer;$/;"	m	struct:iperf_stream	typeref:struct:iperf_stream::timer
seperator_line	locale.c	/^const char seperator_line[] =$/;"	v
server_datagram_size	locale.c	/^const char server_datagram_size[] =$/;"	v
server_hostname	iperf.h	/^    char     *server_hostname;                  \/* -c option *\/$/;"	m	struct:iperf_test
server_port	iperf.h	/^    int       server_port;$/;"	m	struct:iperf_test
server_port	locale.c	/^const char server_port[] =$/;"	v
server_reporting	locale.c	/^const char server_reporting[] =$/;"	v
set_protocol	iperf_api.c	/^set_protocol(struct iperf_test *test, int prot_id)$/;"	f
set_tcp_options	net.c	/^set_tcp_options(int sock, int no_delay, int mss)$/;"	f
set_tcp_windowsize	tcp_window_size.c	/^set_tcp_windowsize(int sock, int bufsize, int dir)$/;"	f
setnonblocking	net.c	/^setnonblocking(int sock)$/;"	f
settings	iperf.h	/^    struct iperf_settings *settings;	\/* pointer to structure settings *\/$/;"	m	struct:iperf_stream	typeref:struct:iperf_stream::iperf_settings
settings	iperf.h	/^    struct iperf_settings *settings;$/;"	m	struct:iperf_test	typeref:struct:iperf_test::iperf_settings
sig_handler	iperf_api.c	/^sig_handler(int sig)$/;"	f
snd	iperf.h	/^    int       (*snd) (struct iperf_stream * stream);$/;"	m	struct:iperf_stream
socket	iperf.h	/^    int       socket;$/;"	m	struct:iperf_stream
socket_bufsize	iperf.h	/^    int       socket_bufsize;       \/* window size for TCP *\/$/;"	m	struct:iperf_settings
start_ping	ping.c	/^long start_ping()$/;"	f
start_time	iperf.h	/^    struct timeval start_time;$/;"	m	struct:iperf_stream_result	typeref:struct:iperf_stream_result::timeval
state	iperf.h	/^    char      state;$/;"	m	struct:iperf_test
stats_callback	iperf.h	/^    void      (*stats_callback) (struct iperf_test *);$/;"	m	struct:iperf_test
stats_interval	iperf.h	/^    double    stats_interval;$/;"	m	struct:iperf_test
stats_timer	iperf.h	/^    struct timer *stats_timer;$/;"	m	struct:iperf_test	typeref:struct:iperf_test::timer
streams	iperf.h	/^    SLIST_ENTRY(iperf_stream) streams;$/;"	m	struct:iperf_stream
streams	iperf.h	/^    SLIST_HEAD(slisthead, iperf_stream) streams;$/;"	m	struct:iperf_test
target	iperf.h	/^    uint64_t  target;$/;"	m	struct:iperf_stream
tcpInfo	iperf.h	/^    char *tcpInfo;	\/* just a placeholder *\/$/;"	m	struct:iperf_interval_results
tcpInfo	iperf.h	/^    struct tcp_info tcpInfo;	\/* getsockopt(TCP_INFO) results here for$/;"	m	struct:iperf_interval_results	typeref:struct:iperf_interval_results::tcp_info
tcp_info	iperf.h	/^    int       tcp_info;                         \/* -T option - display getsockopt(TCP_INFO) results. *\/$/;"	m	struct:iperf_test
tcp_window_size	locale.c	/^const char tcp_window_size[] =$/;"	v
test_start_bytes	locale.c	/^const char test_start_bytes[] =$/;"	v
test_start_time	locale.c	/^const char test_start_time[] =$/;"	v
timer	iperf.h	/^    struct timer *timer;$/;"	m	struct:iperf_test	typeref:struct:iperf_test::timer
timer	timer.h	/^struct timer {$/;"	s
timer_expired	timer.c	/^timer_expired(struct timer * tp)$/;"	f
timer_remaining	timer.c	/^timer_remaining(struct timer * tp)$/;"	f
timeval_diff	timer.c	/^timeval_diff(struct timeval * tv0, struct timeval * tv1)$/;"	f
timeval_to_double	timer.c	/^timeval_to_double(struct timeval * tv)$/;"	f
tos	iperf.h	/^    int       tos;                  \/* type of service bit *\/$/;"	m	struct:iperf_settings
total_recv	iperf.h	/^    iperf_size_t total_recv;$/;"	m	struct:iperf_test
total_sent	iperf.h	/^    iperf_size_t total_sent;$/;"	m	struct:iperf_test
total_time	iperf.h	/^    double    total_time;$/;"	m	struct:iperf_test
ttl	iperf.h	/^    int       ttl;                  \/* IP TTL option *\/$/;"	m	struct:iperf_settings
uS_TO_NS	iperf.h	/^    uS_TO_NS = 1000,$/;"	e	enum:__anon4
udp_buffer_size	locale.c	/^const char udp_buffer_size[] =$/;"	v
unable_to_change_win	locale.c	/^const char unable_to_change_win[]=$/;"	v
unit_atof	units.c	/^    double    unit_atof(const char *s)$/;"	f
unit_atoi	units.c	/^    iperf_size_t unit_atoi(const char *s)$/;"	f
unit_format	iperf.h	/^    char      unit_format;          \/* -f *\/$/;"	m	struct:iperf_settings
unit_snprintf	units.c	/^    void      unit_snprintf(char *s, int inLen,$/;"	f
update_timer	timer.c	/^update_timer(struct timer * tp, time_t sec, suseconds_t usec)$/;"	f
usage	iperf_api.c	/^usage()$/;"	f
usage_long	iperf_api.c	/^usage_long()$/;"	f
usage_long1	locale.c	/^const char usage_long1[] = "Usage: iperf [-s|-c host] [options]\\n"$/;"	v
usage_long2	locale.c	/^const char usage_long2[] = "Client specific:\\n"$/;"	v
usage_short	locale.c	/^const char usage_short[] = "Usage: iperf [-s|-c host] [options]\\n"$/;"	v
v6domain	iperf.h	/^    int       v6domain;                         \/* -6 option *\/$/;"	m	struct:iperf_test
verbose	iperf.h	/^    int	      verbose;                          \/* -V option - verbose mode *\/$/;"	m	struct:iperf_test
wait_server_threads	locale.c	/^const char wait_server_threads[] =$/;"	v
warn_ack_failed	locale.c	/^const char warn_ack_failed[]=$/;"	v
warn_buffer_too_small	locale.c	/^const char warn_buffer_too_small[] =$/;"	v
warn_delay_large	locale.c	/^const char warn_delay_large[] =$/;"	v
warn_fileopen_failed	locale.c	/^const char warn_fileopen_failed[]=$/;"	v
warn_implied_compatibility	locale.c	/^const char warn_implied_compatibility[] =$/;"	v
warn_implied_udp	locale.c	/^const char warn_implied_udp[] =$/;"	v
warn_invalid_client_option	locale.c	/^const char warn_invalid_client_option[] =$/;"	v
warn_invalid_compatibility_option	locale.c	/^const char warn_invalid_compatibility_option[] =$/;"	v
warn_invalid_report	locale.c	/^const char warn_invalid_report[] =$/;"	v
warn_invalid_report_style	locale.c	/^const char warn_invalid_report_style[] =$/;"	v
warn_invalid_server_option	locale.c	/^const char warn_invalid_server_option[] =$/;"	v
warn_invalid_single_threaded	locale.c	/^const char warn_invalid_single_threaded[] =$/;"	v
warn_no_ack	locale.c	/^const char warn_no_ack[]=$/;"	v
warn_no_pathmtu	locale.c	/^const char warn_no_pathmtu[] =$/;"	v
warn_window_requested	locale.c	/^const char warn_window_requested[] =$/;"	v
warn_window_small	locale.c	/^const char warn_window_small[] = "\\$/;"	v
warning	iperf_api.c	/^void warning(char *str)$/;"	f
window_default	locale.c	/^const char window_default[] =$/;"	v
write_set	iperf.h	/^    fd_set    write_set;                        \/* set of write sockets *\/$/;"	m	struct:iperf_test
